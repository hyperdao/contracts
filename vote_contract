--vote contract for cdc 
type State = 'NOT_INITED' | 'COMMON' | 'STOPPED'


type Storage = {
	admin:string,
	state:string,
	priceFeederAddr:string,
	cdcAddr:string,
	stableTokenAddr:string,
	voters:array<string>
	current_votes:array<string>
}

-- events: Stopped

var M = Contract<Storage>()


function M:init()
    self.storage.admin = get_from_address()
	self.storage.state = 'NOT_INITED'
  
	self.storage.stableTokenAddr = ''
	self.storage.priceFeederAddr = ''
	self.storage.cdcAddr = ''
	self.storage.voters = []
	
    print("cdc contract created")
end

let function get_from_address()
    -- 支持合约作为代币持有者
    var from_address: string
    let prev_contract_id = get_prev_call_frame_contract_address()
    if prev_contract_id and is_valid_contract_address(prev_contract_id) then
        -- 如果来源方是合约时
        from_address = prev_contract_id
    else
        from_address = caller_address
    end
    return from_address
end

let function checkAdmin(self: table)
    if self.storage.admin ~= get_from_address() then
        return error("you are not admin, can't call this function")
    end
end

let function checkState(M: table)
    if M.storage.state ~= 'COMMON' then
        return error("state error, now state is " .. tostring(M.storage.state))
    end
end

let function parse_args(arg: string, count: int, error_msg: string)
    if not arg then
        return error(error_msg)
    end
    let parsed = string.split(arg, ',')
    if (not parsed) or (#parsed ~= count) then
        return error(error_msg)
    end
    return parsed
end


let function arrayContains(col: Array<object>, item: object)
    if not item then
        return false
    end
    var value: object
    for _, value in ipairs(col) do
        if value == item then
            return true
        end
    end
    return false
end


function M:init_config(arg: string)
	if self.storage.state ~= 'NOT_INITED' then
        return error("this contract inited before")
    end
	let parsed:Array<string> = totable(parse_args(arg, 1, "arg format error, need format: cdcAddr"))
	cdcAddr = parsed[1]
	if not is_valid_contract_address(cdcAddr) then
		return error("cdcAddr not contract")
	end
	self.storage.cdcAddr = cdcAddr
	
	self.storage.state = COMMON
end


function M:join(arg:string)
    checkAdmin()
	checkState()
	let parsed:Array<string> = totable(parse_args(arg, 1, "arg format error, need format: voter"))
	voter = parsed[1]
	if not is_valid_contract_address(cdcAddr) then
		return error("cdcAddr not contract")
	end	
	
	if arrayContains(self.storage.voters, voter) then
	    return error("voter has exist.")
	end
	table.append(self.storage.voters,voter)
end

function M:remove(arg:string)
    checkAdmin()
	checkState()
	let parsed:Array<string> = totable(parse_args(arg, 1, "arg format error, need format: voter"))
	voter = parsed[1]
	if not is_valid_contract_address(cdcAddr) then
		return error("cdcAddr not contract")
	end	
	if not arrayContains(self.storage.voters, voter) then
	    return error("voter has not exist.")
	end
	
	table.remove(self.storage.voters,voter)
end

function M:propose(arg:string)
    checkState()
	checkAdmin()
	let parsed:Array<string> = totable(parse_args(arg, 1, "arg format error, need format: voter"))
	voter = parsed[1]
	array<string> votes = ['annualStabilityFee','liquidationRatio','liquidationPenalty','liquidationDiscount']
	
	if not arrayContains(votes,arg) then
	   return error("invalid propsal.")
	end
	
	let txid = get_transaction_id()
	proposal_info = {"proposer":get_from_address(),"topic":voter,"create_time":get_chain_now(),'expiration time':get_chain_now()+24*3600,'approval':[],'finished':false}
	fast_map_set('votes',txid,json.dumps(proposal_info))
	table.append(self.storage.current_votes,txid)
end

function M:approval(arg:string)
   checkState()
   let parsed:Array<string> = totable(parse_args(arg, 1, "arg format error, need format: voter"))
   let vote_obj = fast_map_get("votes",parsed[1])
   if vote_obj == nil then
       return error("there is no this vote.")
   end
   
   vote_info = to_table(json.loads(to_string(vote_obj)))
   let approvals:array<string> = vote_info['approval']
   
   if arrayContains(approvals,get_from_address()) then
       return error("this voter has voted once.")
   end
   
   if get_chain_now() > vote_info['expiration time'] then
       vote_info['finished'] = true
	   fast_map_set('votes',parsed[1],json.dumps(vote_info))
	   return error("votes has  expired.")
   end
   
   table.append(approvals,get_from_address())
   vote_info['approval'] = approvals
   
   
   let vote_num = len(approvals)
   let sn_numbers = safemath.safenumber(len(self.storage.voters))
   let sn_mul = safemath.safenumber(2)
   let sn_div = safemath.safenumber(3)
   let sn_ret = safemath.number_add(safemath.number_div(safemath.number_multiply(sn_numbers,sn_mul),sn_div),safemath.safenumber(1))
   if safemath.number_gte(safemath.safenumber(vote_num),sn_ret) then
       vote_info['finished'] = true
	   table.remove(self.storage.current_votes,parsed[1])
   end
   fast_map_set('votes',parsed[1],json.dumps(vote_info))
   --we need to check 
   array<string> votes = ['annualStabilityFee','liquidationRatio','liquidationPenalty','liquidationDiscount']
   let topic = vote_info['topic']
   let cdcContract:object = import_contract_from_address(self.storage.cdcAddr)
   if topic == 'annualStabilityFee' then
       cdcContract:setAnnualStabilityFee("")
   end
   if topic == 'liquidationRatio' then
       cdcContract:setLiquidationRatio('')
   end
   if topic == 'liquidationPenalty' then
       cdcContract:setLiquidationPenalty('')
   end
   if topic == 'liquidationDiscount' then 
       cdcContract:setLiquidationDiscount('')
   end
   
   
end


offline M:get_vote(args:string)
   let parsed:Array<string> = totable(parse_args(arg, 1, "arg format error, need format: voter"))
   let vote_obj = fast_map_get("votes",parsed[1])
   if vote_obj == nil then
       return error("there is no this vote.")
   end
   vote_info = to_table(json.loads(to_string(vote_obj)))
   let r = json.dumps(vote_info)
   
   vote_info = to_table(json.loads(to_string(vote_obj)))
   if not vote_info[finished] then
       let sn_current_time = safemath.safenumber(get_chain_now())
	   let sn_expiration_time = safemath.safenumber(vote_info['expiration time'])
	   
	   if safemath.number_gte(sn_current_time,sn_expiration_time) then
	       vote_info[finished] = true
		   fast_map_set('votes',parsed[1],json.dumps(vote_info))
		   table.remove(self.storage.current_votes,parsed[1])
	   end
	   
   end
   
   
   return r
end

offline M:list_votes(_:string)
    let length = len(self.storage.current_votes)
	let r:array<string> = []
	for _, value in ipairs(self.storage.current_votes) do
       let ret = get_vote(value)
	   table.append(r,ret)
    end
	return r
end
